<!DOCTYPE html>
<html>
    <head>

<meta name="description" content="LA 458/558 20d parse geojson for heat and cluster map 2019">
        	

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.4.0/dist/leaflet.css" />

<script src="https://unpkg.com/leaflet@1.4.0/dist/leaflet.js"></script>
		
<!--Load in Heat plugin -->
<script	 src="https://leaflet.github.io/Leaflet.heat/dist/leaflet-heat.js">
    </script>	
		
		
<!--Load in Leaflet Marker Cluster required files-->
<link rel="stylesheet" href="https://leaflet.github.io/Leaflet.markercluster/dist/MarkerCluster.css" />

<link rel="stylesheet" href="https://leaflet.github.io/Leaflet.markercluster/dist/MarkerCluster.Default.css" />	
		
<script src="https://leaflet.github.io/Leaflet.markercluster/dist/leaflet.markercluster-src.js"></script>

<!--Load in Leaflet AJAX loader required for direct loading of GEOJSON files without a var somename = -->
<script src="https://indicator.extension.iastate.edu/classes/leaflet-ajax-gh-pages/dist/leaflet.ajax.min.js"></script>
		

	</head>	
	<body>
		<div id="map"></div>
    console.clear();

var map;

//Load in the geojson file
myURL = "https://profseeger.github.io/LA558-2019/data/geoJSON/heatPoints.geojson";


//Base Layers
var OSM = L.tileLayer('https://{s}.tile.osm.org/{z}/{x}/{y}.png', {
  attribution: '&copy; <a href="https://osm.org/copyright">OpenStreetMap</a> contributors',
  maxZoom: 18
});

var Stamen_TonerLines = L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}{r}.{ext}', {
	attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
	subdomains: 'abcd',
	minZoom: 0,
	maxZoom: 20,
	ext: 'png'
});


//create the map
map = L.map('map', {
  center: new L.LatLng(42.03, -93.651),
  zoom: 16,
  layers: [Stamen_TonerLines]
});

//Note the required syntax for this heat map plugin is as follows. Therefore you need to parse the GeoJSON file
dataArray = [
  [42.0289013234053, -93.6510745435953, 5],
  [42.027954, -93.655733, 0.3],
  [42.02889, -93.651887, 5],
  [42.0303482614262, -93.651982806623, 5],
  [42.0303482614262, -93.651982806623, 20]
];


//Create the cluster markers by first defining an empty cluster group
var clusterMarkers = L.markerClusterGroup();

//Make a layergroup to hold all the individual markers
var groupedMarkers = L.layerGroup([]);

//define an empty array that will layer hold the heat values
var heatArray = [];


//set color for Circle marker
function getColor(d) {
      return  d > 7 ? 'red' :
	  d > 5 ? '#253494' :
              d > 2 ? "green" :
			"#FFFFFF"; //white
}

var geoJsonLayer = new L.GeoJSON.AJAX(myURL, {
  onEachFeature: function(feature, layer) { //layer could be written as latlng in some examples

    //cluster generation
    //Because the myValue is an integer in the JSON, it may need to be converted to a string when added to the popup if ther is no other string value used in the popup text. To do this use String(JSON element).
    coords = (feature.geometry.coordinates);
    x = L.marker([coords[1], coords[0]], { //don't forget lat and long in opposite order than GeoJSON
      title: feature.properties.myValue
    });
    x.bindPopup("myValue = " + feature.properties.myValue);
    //x.addTo(map);  //uncomment if you wanted to add outside a layer group - note you will not be able to turn these off via layer control if you do this!

    clusterMarkers.addLayer(x); //adds this marker to the clustergroup
    groupedMarkers.addLayer(x); //adds this marker to the clustergroup


    //heatmap generation  - requires parsing of the data and making an array, make that here and then after the geoJsonLayer function has finished making markers go and make the heatmap.
    heatArray.push([coords[1], coords[0], feature.properties.myValue]);

	  console.log(feature.properties.myValue);
	  
  },
  pointToLayer: function(feature, latlng) {
    return new L.circleMarker(latlng, {
      stroke: true,
      weight: 2,
      color: '#000000',
      opacity: 1.0,
      //fillColor: 'blue',
		fillColor: getColor(feature.properties.myValue),
      fillOpacity: 0.9,
      radius: 5,
    }).bindPopup("myValue = " + feature.properties.myValue).bindTooltip(""+feature.properties.myValue);  //.bindToolTip is how you add the mouseover - this is dirrerent than how it is down as a title for a standard marker!
  },
});

geoJsonLayer.addTo(map);
//clusterMarkers.addTo(map);  //optionally could turn this on initially
//groupedMarkers.addTo(map);  //optionally could turn this on initially



//Make heat map after geoJsonLayer completes
geoJsonLayer.on('data:loaded', function() {
  console.log(heatArray.length); //put in console just to confim loading

  var heatMap1 = L.heatLayer(heatArray, {
    minOpacity: 0.15, //the minimum opacity the heat will start at
    maxZoom: 19, //zoom level where the points reach maximum intensity (as intensity scales with zoom), equals maxZoom of the map by default
    max: 1.0, //maximum point intensity, 1.0 by default
    radius: 25, //radius of each "point" of the heatmap, 25 by default
    blur: 25, //amount of blur, 15 by default
    gradient: {
      0.00: 'white',
      0.25: 'lime',
      0.5: 'yellow',
      1: 'red'
    } //color gradient config, e.g. {0.4: 'blue', 0.65: 'lime', 1: 'red'}	
  });
  //heatMap1.addTo(map);  //turn this off and pass control to the LayerControl. Since heatMap1 is created after the standard layerControl you have to pass the heat layer to the l.control via a variable  - in this case called layerControl

  layerControl.addOverlay(heatMap1, "Heat Map");
});



//layer control
var baseMaps = {
  "OpenStreetMap": OSM,
  "Stamen Toner Lines": Stamen_TonerLines
};

var overlayMaps = {
  //"Heat Map 1": heat1,
  //"Heat Map1": heatMap1,
	"CircleMarkers": geoJsonLayer,
  "Cluster Markers": clusterMarkers,
  "Grouped Blue Markers": groupedMarkers
};

//You must name the layer control so you can add the heat map to the named layerControl variable.
layerControl = L.control.layers(baseMaps, overlayMaps).addTo(map);
	</body>
</html>
